openapi: 3.0.3
info:
  title: Nowhere Land Blog API
  description: Complete API specification for Nowhere Land personal blog platform using Supabase PostgREST + Edge Functions
  version: 1.0.0
  contact:
    name: Kyojun Jin
    email: jan@nowhereland.com

servers:
  - url: https://your-project.supabase.co
    description: Supabase production server
  - url: https://your-dev-project.supabase.co
    description: Supabase development server

security:
  - JWTAuth: []

paths:
  # =================================================================
  # AUTHENTICATION ENDPOINTS
  # =================================================================
  /auth/v1/signup:
    post:
      tags: [Authentication]
      summary: User signup
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  maxLength: 64
      responses:
        '200':
          description: Signup successful
        '400':
          description: Invalid input

  /auth/v1/token:
    post:
      tags: [Authentication]
      summary: User login
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string

  /auth/v1/logout:
    post:
      tags: [Authentication]
      summary: User logout
      responses:
        '204':
          description: Logout successful

  # =================================================================
  # POST MANAGEMENT (PostgREST for read/delete, Edge Functions for create/update)
  # =================================================================
  /rest/v1/post:
    get:
      tags: [Posts]
      summary: Get posts with embedded references and toc
      parameters:
        - name: select
          in: query
          schema:
            type: string
          example: "id,title,content,abstract,thumbnail_hash,view_count,published_at,created_at,reference!inner(*),toc_entry!inner(*)"
          description: "PostgREST select with embedded resources - returns post with all references and toc entries"
        - name: status
          in: query
          schema:
            type: string
          example: "eq.published"
        - name: is_deleted
          in: query
          schema:
            type: string
          example: "eq.false"
        - name: order
          in: query
          schema:
            type: string
          example: "published_at.desc"
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: range
          in: header
          schema:
            type: string
          example: "0-9"
          description: "Range header for pagination"
      responses:
        '200':
          description: Posts with embedded references and toc
          headers:
            Content-Range:
              schema:
                type: string
              example: "0-9/100"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostWithDetails'
        '206':
          description: Partial content (when using range)

    patch:
      tags: [Posts]
      summary: Soft delete post (Admin only) - sets is_deleted=true
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [is_deleted]
              properties:
                is_deleted:
                  type: boolean
                  enum: [true]
                  description: "Set to true for soft delete"
      responses:
        '200':
          description: Post soft deleted successfully (is_deleted=true)

  # Post management via Edge Function (create/update with references + indexing)
  /functions/v1/post-manager:
    post:
      tags: [Posts]
      summary: Create post with references, toc, and search indexing (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content]
              properties:
                title:
                  type: string
                  maxLength: 255
                content:
                  type: string
                abstract:
                  type: string
                thumbnail_hash:
                  type: string
                  maxLength: 64
                status:
                  type: string
                  enum: [draft, published, archived]
                  default: draft
                references:
                  type: array
                  items:
                    type: object
                    required: [text, sequence_number, start_position, end_position]
                    properties:
                      text:
                        type: string
                      url:
                        type: string
                        format: uri
                        nullable: true
                      sequence_number:
                        type: integer
                        minimum: 1
                      start_position:
                        type: integer
                        minimum: 0
                      end_position:
                        type: integer
                        minimum: 0
                toc_entries:
                  type: array
                  items:
                    type: object
                    required: [level, title, anchor, position_in_content]
                    properties:
                      level:
                        type: integer
                        minimum: 1
                        maximum: 6
                      title:
                        type: string
                        maxLength: 255
                      anchor:
                        type: string
                        maxLength: 255
                      position_in_content:
                        type: integer
                        minimum: 0
      responses:
        '201':
          description: Post created and indexed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  post_id:
                    type: string
                  indexed:
                    type: boolean

    patch:
      tags: [Posts]
      summary: Update post with references, toc, and re-index (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [post_id]
              properties:
                post_id:
                  type: string
                title:
                  type: string
                content:
                  type: string
                abstract:
                  type: string
                thumbnail_hash:
                  type: string
                status:
                  type: string
                  enum: [draft, published, archived]
                references:
                  type: array
                  items:
                    type: object
                    properties:
                      text:
                        type: string
                      url:
                        type: string
                        format: uri
                      sequence_number:
                        type: integer
                      start_position:
                        type: integer
                      end_position:
                        type: integer
                toc_entries:
                  type: array
                  items:
                    type: object
                    properties:
                      level:
                        type: integer
                      title:
                        type: string
                      anchor:
                        type: string
                      position_in_content:
                        type: integer
      responses:
        '200':
          description: Post updated and re-indexed successfully

  # =================================================================
  # COMMENT MANAGEMENT (PostgREST + Edge Functions)
  # =================================================================
  /rest/v1/comment:
    get:
      tags: [Comments]
      summary: Get approved comments for a post with pagination
      parameters:
        - name: post_id
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
          example: "eq.approved"
        - name: is_deleted
          in: query
          schema:
            type: string
          example: "eq.false"
        - name: order
          in: query
          schema:
            type: string
          example: "created_at.asc"
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: range
          in: header
          schema:
            type: string
          example: "0-19"
      responses:
        '200':
          description: List of comments
          headers:
            Content-Range:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

    post:
      tags: [Comments]
      summary: Create admin comment (Admin only - no password needed)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [post_id, content]
              properties:
                post_id:
                  type: string
                content:
                  type: string
                parent_comment_id:
                  type: string
                  nullable: true
      responses:
        '201':
          description: Admin comment created successfully

    patch:
      tags: [Comments]
      summary: Update comment status or soft delete (Admin only)
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [approved, flagged, deleted]
                is_deleted:
                  type: boolean
                  description: "Set to true for soft delete"
      responses:
        '200':
          description: Comment updated successfully

  # Comment creation with filtering (Edge Function)
  /functions/v1/comment-filter:
    post:
      tags: [Comments]
      summary: Create comment with content filtering
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [post_id, username, password, content]
              properties:
                post_id:
                  type: string
                username:
                  type: string
                  maxLength: 50
                password:
                  type: string
                  minLength: 8
                  maxLength: 64
                content:
                  type: string
                parent_comment_id:
                  type: string
                  nullable: true
      responses:
        '201':
          description: Comment created successfully
        '400':
          description: Invalid input or content flagged

  # Comment deletion with password verification (Edge Function)
  /functions/v1/comment-delete:
    post:
      tags: [Comments]
      summary: Soft delete anonymous comment with password verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [comment_id, password]
              properties:
                comment_id:
                  type: string
                password:
                  type: string
                  description: "Plain password - will be hashed and verified against stored hash"
      responses:
        '200':
          description: Comment soft deleted successfully
        '401':
          description: Invalid password
        '404':
          description: Comment not found

  # Comment modification with password verification (Edge Function)
  /functions/v1/comment-modify:
    post:
      tags: [Comments]
      summary: Modify anonymous comment with password verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [comment_id, password, content]
              properties:
                comment_id:
                  type: string
                password:
                  type: string
                  description: "Plain password - will be hashed and verified against stored hash"
                content:
                  type: string
      responses:
        '200':
          description: Comment modified successfully
        '401':
          description: Invalid password
        '404':
          description: Comment not found

  # =================================================================
  # NOTE: References are managed via /functions/v1/post-manager
  # Frontend aggregates references with post data, no separate API needed
  # =================================================================

  # =================================================================
  # TAG MANAGEMENT (PostgREST)
  # =================================================================
  /rest/v1/fixed_tag:
    get:
      tags: [Tags]
      summary: Get active fixed tags
      parameters:
        - name: is_active
          in: query
          schema:
            type: string
          example: "eq.true"
        - name: is_deleted
          in: query
          schema:
            type: string
          example: "eq.false"
      responses:
        '200':
          description: List of fixed tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FixedTag'

    post:
      tags: [Tags]
      summary: Create fixed tag (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  maxLength: 50
                color:
                  type: string
                  pattern: '^#[0-9A-Fa-f]{6}$'
                  default: '#D01C1F'
      responses:
        '201':
          description: Fixed tag created successfully

    patch:
      tags: [Tags]
      summary: Update fixed tag or soft delete (Admin only)
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                color:
                  type: string
                is_active:
                  type: boolean
                is_deleted:
                  type: boolean
                  description: "Set to true for soft delete"
      responses:
        '200':
          description: Fixed tag updated successfully

  # =================================================================
  # SITE SETTINGS (PostgREST)
  # =================================================================
  /rest/v1/site_setting:
    get:
      tags: [Admin Settings]
      summary: Get site settings (Admin only)
      responses:
        '200':
          description: List of site settings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SiteSetting'

    patch:
      tags: [Admin Settings]
      summary: Update site setting (Admin only)
      parameters:
        - name: key
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [value]
              properties:
                value:
                  type: string
      responses:
        '200':
          description: Site setting updated successfully

  # =================================================================
  # ABOUT ME MANAGEMENT (PostgREST for read, Edge Function for atomic updates)
  # =================================================================
  /rest/v1/about_me:
    get:
      tags: [About Me]
      summary: Get about me content
      security: []
      responses:
        '200':
          description: About me content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    user_id:
                      type: string
                    content:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time

  /rest/v1/contact:
    get:
      tags: [About Me]
      summary: Get active contacts
      security: []
      parameters:
        - name: is_active
          in: query
          schema:
            type: string
          example: "eq.true"
        - name: is_deleted
          in: query
          schema:
            type: string
          example: "eq.false"
        - name: order
          in: query
          schema:
            type: string
          example: "sort_order.asc"
      responses:
        '200':
          description: List of active contacts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'

  # Atomic update via Edge Function
  /functions/v1/about-me:
    post:
      tags: [About Me]
      summary: Update about me content and contacts atomically (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content:
                  type: string
                contacts:
                  type: array
                  items:
                    type: object
                    required: [type, url]
                    properties:
                      type:
                        type: string
                        enum: [email, x, instagram, facebook, phone]
                      display_name:
                        type: string
                        maxLength: 100
                      url:
                        type: string
                      is_active:
                        type: boolean
                        default: true
                      sort_order:
                        type: integer
                        default: 0
      responses:
        '200':
          description: About me updated successfully

  # =================================================================
  # SEARCH (Edge Function)
  # =================================================================
  /functions/v1/search-handler:
    post:
      tags: [Search]
      summary: Search posts with text and tag filters
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  maxLength: 255
                tags:
                  type: array
                  items:
                    type: string
                limit:
                  type: integer
                  minimum: 1
                  maximum: 50
                  default: 10
                offset:
                  type: integer
                  minimum: 0
                  default: 0
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostSearchResult'
                  total:
                    type: integer
                  query:
                    type: string
                  took:
                    type: integer

  # =================================================================
  # AI SERVICES (Edge Functions)
  # =================================================================
  /functions/v1/ai-tag-generator:
    post:
      tags: [AI Services]
      summary: Generate tags for post content (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content]
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '200':
          description: Generated tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      type: string
                  error:
                    type: string
                    nullable: true

  /functions/v1/ai-abstract-generator:
    post:
      tags: [AI Services]
      summary: Generate abstract for post content (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content]
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '200':
          description: Generated abstract
          content:
            application/json:
              schema:
                type: object
                properties:
                  abstract:
                    type: string
                  warning:
                    type: string
                    nullable: true
                  error:
                    type: string
                    nullable: true

  # =================================================================
  # MEDIA MANAGEMENT (Edge Functions)
  # =================================================================
  /functions/v1/image-processor:
    post:
      tags: [Media]
      summary: Upload and process image (Admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [image]
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file (JPG, PNG, GIF, WebP)
      responses:
        '200':
          description: Image processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  hash:
                    type: string
                  original_url:
                    type: string
                  webp_url:
                    type: string
        '400':
          description: Invalid file type or size

  /functions/v1/media-cdn/{hash}:
    get:
      tags: [Media]
      summary: Serve image with dynamic resizing
      security: []
      parameters:
        - name: hash
          in: path
          required: true
          schema:
            type: string
        - name: width
          in: query
          schema:
            type: integer
            minimum: 32
            maximum: 2048
          description: Desired image width in pixels
      responses:
        '200':
          description: Image file
          content:
            image/webp:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found

  # =================================================================
  # ANALYTICS & TRACKING (Edge Functions)
  # =================================================================
  /functions/v1/view-tracker:
    post:
      tags: [Analytics]
      summary: Track post view and dwell time
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [post_id]
              properties:
                post_id:
                  type: string
                dwell_time:
                  type: integer
                  minimum: 0
                  description: Time spent on page in seconds
                gdpr_consent:
                  type: boolean
                  default: false
                ccpa_opt_out:
                  type: boolean
                  default: false
      responses:
        '200':
          description: View tracked
          content:
            application/json:
              schema:
                type: object
                properties:
                  tracked:
                    type: boolean
                  new_view:
                    type: boolean

  /functions/v1/contact-click:
    post:
      tags: [Analytics]
      summary: Track contact link clicks
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [contact_id]
              properties:
                contact_id:
                  type: string
                gdpr_consent:
                  type: boolean
                  default: false
                ccpa_opt_out:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Click tracked
          content:
            application/json:
              schema:
                type: object
                properties:
                  tracked:
                    type: boolean

  # =================================================================
  # DASHBOARD ANALYTICS (PostgREST Views)
  # =================================================================
  /rest/v1/daily_analytics:
    get:
      tags: [Dashboard]
      summary: Get daily analytics (Admin only)
      parameters:
        - name: view_date
          in: query
          schema:
            type: string
          example: "gte.2024-01-01"
        - name: limit
          in: query
          schema:
            type: integer
          example: 30
        - name: order
          in: query
          schema:
            type: string
          example: "view_date.desc"
      responses:
        '200':
          description: Daily analytics data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    view_date:
                      type: string
                      format: date
                    unique_visitors:
                      type: integer
                    total_views:
                      type: integer
                    avg_dwell_time:
                      type: number
                    posts_viewed:
                      type: integer

  /rest/v1/post_performance:
    get:
      tags: [Dashboard]
      summary: Get post performance metrics (Admin only)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          example: 20
        - name: order
          in: query
          schema:
            type: string
          example: "published_at.desc"
      responses:
        '200':
          description: Post performance data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    view_count:
                      type: integer
                    published_at:
                      type: string
                      format: date-time
                    unique_visitors:
                      type: integer
                    comment_count:
                      type: integer
                    avg_dwell_time:
                      type: number

  /rest/v1/contact_analytics:
    get:
      tags: [Dashboard]
      summary: Get contact click analytics (Admin only)
      parameters:
        - name: click_date
          in: query
          schema:
            type: string
          example: "gte.2024-01-01"
        - name: order
          in: query
          schema:
            type: string
          example: "click_date.desc,click_count.desc"
      responses:
        '200':
          description: Contact analytics data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    display_name:
                      type: string
                    click_count:
                      type: integer
                    unique_clickers:
                      type: integer
                    click_date:
                      type: string
                      format: date

  # =================================================================
  # RELATED POSTS (PostgREST)
  # =================================================================
  /rest/v1/related_post:
    get:
      tags: [Related Posts]
      summary: Get related posts for a specific post
      parameters:
        - name: source_post_id
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
          example: 5
        - name: order
          in: query
          schema:
            type: string
          example: "relevance_score.desc"
      responses:
        '200':
          description: Related posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelatedPost'

  # =================================================================
  # ADMIN NOTIFICATIONS (PostgREST)
  # =================================================================
  /rest/v1/admin_notification:
    get:
      tags: [Admin Notifications]
      summary: Get admin notifications (Admin only)
      parameters:
        - name: is_read
          in: query
          schema:
            type: string
          example: "eq.false"
        - name: order
          in: query
          schema:
            type: string
          example: "created_at.desc"
        - name: limit
          in: query
          schema:
            type: integer
          example: 50
      responses:
        '200':
          description: Admin notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminNotification'

    patch:
      tags: [Admin Notifications]
      summary: Mark notification as read (Admin only)
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                is_read:
                  type: boolean
      responses:
        '200':
          description: Notification updated successfully

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from Supabase Auth

  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        abstract:
          type: string
        thumbnail_hash:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        view_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        published_at:
          type: string
          format: date-time

    PostWithDetails:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        abstract:
          type: string
        thumbnail_hash:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        view_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        published_at:
          type: string
          format: date-time
        reference:
          type: array
          items:
            $ref: '#/components/schemas/Reference'
        toc_entry:
          type: array
          items:
            $ref: '#/components/schemas/TocEntry'

    Comment:
      type: object
      properties:
        id:
          type: string
        post_id:
          type: string
        parent_comment_id:
          type: string
          nullable: true
        username:
          type: string
        content:
          type: string
        status:
          type: string
          enum: [approved, flagged, deleted]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Reference:
      type: object
      properties:
        id:
          type: string
        post_id:
          type: string
        text:
          type: string
        url:
          type: string
          nullable: true
        sequence_number:
          type: integer
        start_position:
          type: integer
        end_position:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TocEntry:
      type: object
      properties:
        id:
          type: string
        post_id:
          type: string
        level:
          type: integer
          minimum: 1
          maximum: 6
        title:
          type: string
        anchor:
          type: string
        position_in_content:
          type: integer
        created_at:
          type: string
          format: date-time

    FixedTag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        color:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SiteSetting:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        value:
          type: string
        description:
          type: string
        setting_type:
          type: string
          enum: [string, number, boolean, json, color]
        updated_at:
          type: string
          format: date-time

    Contact:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [email, x, instagram, facebook, phone]
        display_name:
          type: string
        url:
          type: string
        is_active:
          type: boolean
        sort_order:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PostSearchResult:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        abstract:
          type: string
        thumbnail_hash:
          type: string
        published_at:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        score:
          type: number
        highlights:
          type: object

    RelatedPost:
      type: object
      properties:
        id:
          type: string
        source_post_id:
          type: string
        related_post_id:
          type: string
        common_tag_count:
          type: integer
        relevance_score:
          type: number
        calculated_at:
          type: string
          format: date-time

    AdminNotification:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        title:
          type: string
        message:
          type: string
        related_entity_type:
          type: string
        related_entity_id:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Posts
    description: Blog post management
  - name: Comments
    description: Comment system with moderation
  - name: References
    description: Post reference management
  - name: Tags
    description: Tag management (fixed and generated)
  - name: Admin Settings
    description: Site configuration and settings
  - name: About Me
    description: About me page and contact management
  - name: Search
    description: Content search and discovery
  - name: AI Services
    description: AI-powered content generation
  - name: Media
    description: Image upload and processing
  - name: Analytics
    description: Usage tracking and analytics
  - name: Dashboard
    description: Admin dashboard and reporting
  - name: Related Posts
    description: Related post recommendations
  - name: Admin Notifications
    description: Admin notification system