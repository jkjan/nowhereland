#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'

const SUPABASE_URL = 'http://127.0.0.1:54321'
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0'
const FUNCTION_URL = 'http://127.0.0.1:54321/functions/v1/post-manager'

let accessToken = null
let userId = null

async function testRequest(method, data, description, expectedStatus, headers = {}) {
  console.log(`üìù ${description}`)
  console.log(`Method: ${method}`)
  console.log(`Expected Status: ${expectedStatus}`)
  
  const requestHeaders = {
    'Content-Type': 'application/json'
  }
  
  // Add custom headers first
  Object.keys(headers).forEach(key => {
    if (headers[key] !== null) {
      requestHeaders[key] = headers[key]
    }
  })
  
  // Add default authorization if not explicitly set
  if (accessToken && method !== 'OPTIONS' && !headers.hasOwnProperty('Authorization')) {
    requestHeaders['Authorization'] = `Bearer ${accessToken}`
  }
  
  try {
    const response = await fetch(FUNCTION_URL, {
      method,
      headers: requestHeaders,
      body: data ? JSON.stringify(data) : undefined
    })
    
    const body = await response.text()
    let result
    try {
      result = JSON.parse(body)
    } catch {
      result = body
    }
    
    console.log(`Actual Status: ${response.status}`)
    console.log(`Response: ${JSON.stringify(result)}`)
    
    if (response.status === expectedStatus) {
      console.log('‚úÖ PASS')
      return result
    } else {
      console.log(`‚ùå FAIL (expected ${expectedStatus}, got ${response.status})`)
      throw new Error(`Test failed: ${description}`)
    }
  } catch (error) {
    console.log(`‚ùå ERROR: ${error.message}`)
    throw error
  } finally {
    console.log('')
  }
}

async function setupAuthentication() {
  console.log('üîë Setting up authentication...')
  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)
  
  // Try to sign up, if user exists, sign in
  const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
    email: 'test@example.com',
    password: 'testpassword123'
  })
  
  const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
    email: 'test@example.com',
    password: 'testpassword123'
  })
  
  if (signInError) {
    throw new Error(`Authentication failed: ${signInError.message}`)
  }
  
  accessToken = signInData.session.access_token
  userId = signInData.user.id
  
  // Create user record in database if it doesn't exist
  try {
    await fetch(`${SUPABASE_URL}/rest/v1/user`, {
      method: 'POST',
      headers: {
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU',
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        id: userId,
        username: 'testuser',
        email: 'test@example.com',
        is_admin: true
      })
    })
  } catch (error) {
    // User might already exist, ignore error
  }
  
  console.log('‚úÖ Authentication setup complete')
  console.log(`üìã User ID: ${userId}`)
  console.log('')
}

async function runCompleteTests() {
  console.log('üß™ Complete Post-Manager Test Suite')
  console.log('====================================')
  console.log(`Testing: ${FUNCTION_URL}`)
  console.log('')
  
  try {
    // Setup authentication
    await setupAuthentication()
    
    // Test 1: OPTIONS request
    console.log('üåê Test 1: CORS OPTIONS')
    await testRequest('OPTIONS', null, 'CORS preflight check', 200)
    
    // Test 2: Create post
    console.log('üìù Test 2: Create New Post')
    const createData = {
      user_id: userId,
      title: 'Test Blog Post',
      content: '# Introduction\nThis is a test blog post.\n## Getting Started\nHere we go!',
      abstract: 'A test blog post',
      status: 'published'
    }
    const createResult = await testRequest('POST', createData, 'Create new post', 201)
    const postId = createResult.post_id
    console.log(`üìã Created post ID: ${postId}`)
    
    // Test 3: Update post
    console.log('üîÑ Test 3: Update Post')
    const updateData = {
      post_id: postId,
      title: 'Updated Blog Post',
      content: 'Updated content',
      status: 'published'
    }
    await testRequest('PATCH', updateData, 'Update existing post', 200)
    
    // Test 4: Validation - empty fields
    console.log('üö´ Test 4: Validation - Empty Fields')
    await testRequest('POST', { user_id: userId, title: '', content: '' }, 'Empty title and content', 400)
    
    // Test 5: Validation - missing post_id for update
    console.log('üö´ Test 5: Validation - Missing post_id')
    await testRequest('PATCH', { user_id: userId, title: 'Test' }, 'PATCH without post_id', 400)
    
    // Test 6: Method not allowed
    console.log('üö´ Test 6: Method Not Allowed')
    try {
      const response = await fetch(FUNCTION_URL, { method: 'DELETE' })
      if (response.status === 405) {
        console.log('‚úÖ PASS - DELETE method correctly rejected')
      } else {
        console.log(`‚ùå FAIL - Expected 405, got ${response.status}`)
        throw new Error('Method validation failed')
      }
    } catch (error) {
      if (error.message !== 'Method validation failed') {
        console.log('‚úÖ PASS - DELETE method correctly rejected')
      } else {
        throw error
      }
    }
    console.log('')
    
    // Test 7: Complex post with references
    console.log('üìé Test 7: Post with References')
    const complexData = {
      user_id: userId,
      title: 'Complex Post',
      content: '# Complex Content\nWith references.',
      references: [{
        text: 'Reference 1',
        url: 'https://example.com',
        sequence_number: 1,
        start_position: 10,
        end_position: 21
      }]
    }
    await testRequest('POST', complexData, 'Create post with references', 201)
    
    // Test 8: Authentication tests
    console.log('üîê Test 8: Authentication Tests')
    
    // Test without authorization header
    await testRequest('POST', createData, 'Request without authorization', 401, { Authorization: null })
    
    // Test with invalid token
    await testRequest('POST', createData, 'Request with invalid token', 401, { Authorization: 'Bearer invalid_token' })
    
    // Test 9: Validation edge cases
    console.log('üìè Test 9: Validation Edge Cases')
    
    // Title too long
    const longTitle = 'A'.repeat(300)
    await testRequest('POST', {
      user_id: userId,
      title: longTitle,
      content: 'Valid content'
    }, 'Title too long', 400)
    
    // Reference text too long  
    const longRefText = 'A'.repeat(1100)
    await testRequest('POST', {
      user_id: userId,
      title: 'Valid title',
      content: 'Valid content',
      references: [{
        text: longRefText,
        sequence_number: 1,
        start_position: 0,
        end_position: 10
      }]
    }, 'Reference text too long', 400)
    
    // Invalid status
    await testRequest('POST', {
      user_id: userId,
      title: 'Valid title',
      content: 'Valid content',
      status: 'invalid_status'
    }, 'Invalid status value', 400)
    
    console.log('üéâ ALL TESTS PASSED!')
    console.log('====================')
    console.log('‚úÖ CORS handling')
    console.log('‚úÖ POST create operation')
    console.log('‚úÖ PATCH update operation')
    console.log('‚úÖ Input validation')
    console.log('‚úÖ Method validation')
    console.log('‚úÖ Reference handling')
    console.log('‚úÖ Authentication checks')
    console.log('‚úÖ Edge case validation')
    console.log('‚úÖ nanoid(10) ID generation')
    console.log('')
    console.log('üöÄ post-manager function is production ready!')
    
  } catch (error) {
    console.error('‚ùå Test suite failed:', error.message)
    process.exit(1)
  }
}

runCompleteTests()